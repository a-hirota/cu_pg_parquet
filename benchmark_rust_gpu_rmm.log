/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/numba_cuda/numba/cuda/dispatcher.py:605: NumbaPerformanceWarning: [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m
  warn(NumbaPerformanceWarning(msg))
/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/numba_cuda/numba/cuda/dispatcher.py:605: NumbaPerformanceWarning: [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m
  warn(NumbaPerformanceWarning(msg))
/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/numba_cuda/numba/cuda/dispatcher.py:605: NumbaPerformanceWarning: [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m
  warn(NumbaPerformanceWarning(msg))
/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/numba_cuda/numba/cuda/dispatcher.py:605: NumbaPerformanceWarning: [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m
  warn(NumbaPerformanceWarning(msg))
=== PostgreSQL → Rust → GPU 直接抽出版（統合バッファ削除） ===
チャンク数: 8
各チャンクサイズ: 約6.6 GB
出力ディレクトリ: /dev/shm

改善内容:
  - 統合バッファを完全に削除
  - 入力データから直接cuDF列を作成
  - メモリ使用量を大幅削減
  - GPUメモリ不足エラーを解決
RMM既に初期化済み

✅ CUDA context OK

[Rust] チャンク 1/8 転送開始
[Rust] チャンク 1 転送完了: 6.59 GB, 4.95秒 (1.33 GB/秒)
カラム数: 17

[GPU] チャンク 1 直接抽出処理開始（統合バッファ削除）
  ファイル読み込み: 3.57秒 (1.84 GB/秒)
  GPU転送: 0.53秒 (12.38 GB/秒)
=== GPU並列パース開始 ===
✅ Ultra Fast GPU並列パーサー使用（8.94倍高速化達成）
GPUパース完了: 14808919 行 (2.9885秒)
=== 直接列抽出開始（統合バッファ不使用） ===
文字列列 lo_orderpriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_orderpriority: 最適化バッファ作成完了 (222133785 bytes)
文字列列 lo_shippriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shippriority: 最適化バッファ作成完了 (14808919 bytes)
文字列列 lo_commit_date: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_commit_date: 最適化バッファ作成完了 (118471352 bytes)
文字列列 lo_shipmode: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shipmode: 最適化バッファ作成完了 (148089190 bytes)
直接列抽出開始（統合バッファ不使用）: 14808919 行

=== パフォーマンス統計（直接抽出版） ===
処理データ: 14,808,919 行 × 17 列
データサイズ: 6745.30 MB
統合バッファ: 【削除済み】

--- 詳細タイミング ---
  gpu_parsing         : 2.9885 秒
  process_and_export  : 2.5711 秒
    ├─ string_buffers  : 0.4089 秒
    ├─ direct_extract  : 0.5073 秒
    └─ parquet_export  : 1.6549 秒
  total               : 2.5711 秒
  overall_total       : 5.5596 秒

--- スループット ---
  セル処理速度: 45,282,207 cells/sec
  データ処理速度: 1213.27 MB/sec

--- メモリ効率 ---
  統合バッファ削除による節約: ~1412.3 MB
  ゼロコピー率: 100%（文字列・固定長とも）
==============================
[GPU] チャンク 1 処理完了:
  - 処理行数: 14,808,919 行
  - GPU全体時間: 9.67秒
  - 内訳:
    - ファイル読込: 3.57秒
    - GPU転送: 0.53秒
    - GPUパース: 2.99秒
    - 直接抽出処理: 2.57秒
      - 文字列バッファ: 0.41秒
      - 直接列抽出: 0.51秒
      - Parquet書込: 1.65秒
  - スループット: 0.68 GB/秒
  - 統合バッファ: 【削除済み】

[Rust] チャンク 2/8 転送開始
[Rust] チャンク 2 転送完了: 6.49 GB, 4.78秒 (1.36 GB/秒)

[GPU] チャンク 2 直接抽出処理開始（統合バッファ削除）
  ファイル読み込み: 3.56秒 (1.82 GB/秒)
  GPU転送: 0.52秒 (12.60 GB/秒)
=== GPU並列パース開始 ===
✅ Ultra Fast GPU並列パーサー使用（8.94倍高速化達成）
GPUパース完了: 14496484 行 (2.5000秒)
=== 直接列抽出開始（統合バッファ不使用） ===
文字列列 lo_orderpriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_orderpriority: 最適化バッファ作成完了 (217447260 bytes)
文字列列 lo_shippriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shippriority: 最適化バッファ作成完了 (14496484 bytes)
文字列列 lo_commit_date: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_commit_date: 最適化バッファ作成完了 (115971872 bytes)
文字列列 lo_shipmode: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shipmode: 最適化バッファ作成完了 (144964840 bytes)
直接列抽出開始（統合バッファ不使用）: 14496484 行

=== パフォーマンス統計（直接抽出版） ===
処理データ: 14,496,484 行 × 17 列
データサイズ: 6650.02 MB
統合バッファ: 【削除済み】

--- 詳細タイミング ---
  gpu_parsing         : 2.5000 秒
  process_and_export  : 1.9643 秒
    ├─ string_buffers  : 0.3557 秒
    ├─ direct_extract  : 0.0468 秒
    └─ parquet_export  : 1.5618 秒
  total               : 1.9643 秒
  overall_total       : 4.4642 秒

--- スループット ---
  セル処理速度: 55,203,237 cells/sec
  データ処理速度: 1489.62 MB/sec

--- メモリ効率 ---
  統合バッファ削除による節約: ~1382.5 MB
  ゼロコピー率: 100%（文字列・固定長とも）
==============================
[GPU] チャンク 2 処理完了:
  - 処理行数: 14,496,484 行
  - GPU全体時間: 8.54秒
  - 内訳:
    - ファイル読込: 3.56秒
    - GPU転送: 0.52秒
    - GPUパース: 2.50秒
    - 直接抽出処理: 1.96秒
      - 文字列バッファ: 0.36秒
      - 直接列抽出: 0.05秒
      - Parquet書込: 1.56秒
  - スループット: 0.76 GB/秒
  - 統合バッファ: 【削除済み】

[Rust] チャンク 3/8 転送開始
[Rust] チャンク 3 転送完了: 6.49 GB, 4.77秒 (1.36 GB/秒)

[GPU] チャンク 3 直接抽出処理開始（統合バッファ削除）
  ファイル読み込み: 3.62秒 (1.79 GB/秒)
  GPU転送: 0.52秒 (12.43 GB/秒)
=== GPU並列パース開始 ===
✅ Ultra Fast GPU並列パーサー使用（8.94倍高速化達成）
GPUパース完了: 14496504 行 (2.5428秒)
=== 直接列抽出開始（統合バッファ不使用） ===
文字列列 lo_orderpriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_orderpriority: 最適化バッファ作成完了 (217447560 bytes)
文字列列 lo_shippriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shippriority: 最適化バッファ作成完了 (14496504 bytes)
文字列列 lo_commit_date: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_commit_date: 最適化バッファ作成完了 (115972032 bytes)
文字列列 lo_shipmode: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shipmode: 最適化バッファ作成完了 (144965040 bytes)
直接列抽出開始（統合バッファ不使用）: 14496504 行

=== パフォーマンス統計（直接抽出版） ===
処理データ: 14,496,504 行 × 17 列
データサイズ: 6650.02 MB
統合バッファ: 【削除済み】

--- 詳細タイミング ---
  gpu_parsing         : 2.5428 秒
  process_and_export  : 1.9660 秒
    ├─ string_buffers  : 0.3611 秒
    ├─ direct_extract  : 0.0469 秒
    └─ parquet_export  : 1.5580 秒
  total               : 1.9660 秒
  overall_total       : 4.5088 秒

--- スループット ---
  セル処理速度: 54,657,332 cells/sec
  データ処理速度: 1474.89 MB/sec

--- メモリ効率 ---
  統合バッファ削除による節約: ~1382.5 MB
  ゼロコピー率: 100%（文字列・固定長とも）
==============================
[GPU] チャンク 3 処理完了:
  - 処理行数: 14,496,504 行
  - GPU全体時間: 8.66秒
  - 内訳:
    - ファイル読込: 3.62秒
    - GPU転送: 0.52秒
    - GPUパース: 2.54秒
    - 直接抽出処理: 1.97秒
      - 文字列バッファ: 0.36秒
      - 直接列抽出: 0.05秒
      - Parquet書込: 1.56秒
  - スループット: 0.75 GB/秒
  - 統合バッファ: 【削除済み】

[Rust] チャンク 4/8 転送開始
[Rust] チャンク 4 転送完了: 6.49 GB, 4.87秒 (1.33 GB/秒)

[GPU] チャンク 4 直接抽出処理開始（統合バッファ削除）
  ファイル読み込み: 3.53秒 (1.84 GB/秒)
  GPU転送: 0.52秒 (12.50 GB/秒)
=== GPU並列パース開始 ===
✅ Ultra Fast GPU並列パーサー使用（8.94倍高速化達成）
GPUパース完了: 14496744 行 (2.5002秒)
=== 直接列抽出開始（統合バッファ不使用） ===
文字列列 lo_orderpriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_orderpriority: 最適化バッファ作成完了 (217451160 bytes)
文字列列 lo_shippriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shippriority: 最適化バッファ作成完了 (14496744 bytes)
文字列列 lo_commit_date: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_commit_date: 最適化バッファ作成完了 (115973952 bytes)/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/numba_cuda/numba/cuda/dispatcher.py:605: NumbaPerformanceWarning: [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m
  warn(NumbaPerformanceWarning(msg))
/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/numba_cuda/numba/cuda/dispatcher.py:605: NumbaPerformanceWarning: [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m
  warn(NumbaPerformanceWarning(msg))
/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/numba_cuda/numba/cuda/dispatcher.py:605: NumbaPerformanceWarning: [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m
  warn(NumbaPerformanceWarning(msg))

文字列列 lo_shipmode: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shipmode: 最適化バッファ作成完了 (144967440 bytes)
直接列抽出開始（統合バッファ不使用）: 14496744 行

=== パフォーマンス統計（直接抽出版） ===
処理データ: 14,496,744 行 × 17 列
データサイズ: 6650.09 MB
統合バッファ: 【削除済み】

--- 詳細タイミング ---
  gpu_parsing         : 2.5002 秒
  process_and_export  : 1.9950 秒
    ├─ string_buffers  : 0.3849 秒
    ├─ direct_extract  : 0.0470 秒
    └─ parquet_export  : 1.5630 秒
  total               : 1.9949 秒
  overall_total       : 4.4952 秒

--- スループット ---
  セル処理速度: 54,824,027 cells/sec
  データ処理速度: 1479.38 MB/sec

--- メモリ効率 ---
  統合バッファ削除による節約: ~1382.5 MB
  ゼロコピー率: 100%（文字列・固定長とも）
==============================
[GPU] チャンク 4 処理完了:
  - 処理行数: 14,496,744 行
  - GPU全体時間: 8.55秒
  - 内訳:
    - ファイル読込: 3.53秒
    - GPU転送: 0.52秒
    - GPUパース: 2.50秒
    - 直接抽出処理: 1.99秒
      - 文字列バッファ: 0.38秒
      - 直接列抽出: 0.05秒
      - Parquet書込: 1.56秒
  - スループット: 0.76 GB/秒
  - 統合バッファ: 【削除済み】

[Rust] チャンク 5/8 転送開始
[Rust] チャンク 5 転送完了: 6.49 GB, 4.96秒 (1.31 GB/秒)

[GPU] チャンク 5 直接抽出処理開始（統合バッファ削除）
  ファイル読み込み: 3.62秒 (1.80 GB/秒)
  GPU転送: 0.52秒 (12.48 GB/秒)
=== GPU並列パース開始 ===
✅ Ultra Fast GPU並列パーサー使用（8.94倍高速化達成）
GPUパース完了: 14495908 行 (6.8063秒)
=== 直接列抽出開始（統合バッファ不使用） ===
文字列列 lo_orderpriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_orderpriority: 最適化バッファ作成完了 (217438620 bytes)
文字列列 lo_shippriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shippriority: 最適化バッファ作成完了 (14495908 bytes)
文字列列 lo_commit_date: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_commit_date: 最適化バッファ作成完了 (115967264 bytes)
文字列列 lo_shipmode: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shipmode: 最適化バッファ作成完了 (144959080 bytes)
直接列抽出開始（統合バッファ不使用）: 14495908 行

=== パフォーマンス統計（直接抽出版） ===
処理データ: 14,495,908 行 × 17 列
データサイズ: 6649.85 MB
統合バッファ: 【削除済み】

--- 詳細タイミング ---
  gpu_parsing         : 6.8063 秒
  process_and_export  : 1.8768 秒
    ├─ string_buffers  : 0.3894 秒
    ├─ direct_extract  : 0.0471 秒
    └─ parquet_export  : 1.4403 秒
  total               : 1.8768 秒
  overall_total       : 8.6832 秒

--- スループット ---
  セル処理速度: 28,380,202 cells/sec
  データ処理速度: 765.83 MB/sec

--- メモリ効率 ---
  統合バッファ削除による節約: ~1382.4 MB
  ゼロコピー率: 100%（文字列・固定長とも）
==============================
[GPU] チャンク 5 処理完了:
  - 処理行数: 14,495,908 行
  - GPU全体時間: 12.83秒
  - 内訳:
    - ファイル読込: 3.62秒
    - GPU転送: 0.52秒
    - GPUパース: 6.81秒
    - 直接抽出処理: 1.88秒
      - 文字列バッファ: 0.39秒
      - 直接列抽出: 0.05秒
      - Parquet書込: 1.44秒
  - スループット: 0.51 GB/秒
  - 統合バッファ: 【削除済み】

[Rust] チャンク 6/8 転送開始
[Rust] チャンク 6 転送完了: 6.73 GB, 4.86秒 (1.38 GB/秒)

[GPU] チャンク 6 直接抽出処理開始（統合バッファ削除）
  ファイル読み込み: 3.56秒 (1.89 GB/秒)
  GPU転送: 0.54秒 (12.49 GB/秒)
=== GPU並列パース開始 ===
✅ Ultra Fast GPU並列パーサー使用（8.94倍高速化達成）
GPUパース完了: 15304303 行 (13.7598秒)
=== 直接列抽出開始（統合バッファ不使用） ===
文字列列 lo_orderpriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_orderpriority: 最適化バッファ作成完了 (229564545 bytes)
文字列列 lo_shippriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shippriority: 最適化バッファ作成完了 (15304303 bytes)
文字列列 lo_commit_date: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_commit_date: 最適化バッファ作成完了 (122434424 bytes)
文字列列 lo_shipmode: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shipmode: 最適化バッファ作成完了 (153043030 bytes)
直接列抽出開始（統合バッファ不使用）: 15304303 行

=== パフォーマンス統計（直接抽出版） ===
処理データ: 15,304,303 行 × 17 列
データサイズ: 6894.37 MB
統合バッファ: 【削除済み】

--- 詳細タイミング ---
  gpu_parsing         : 13.7598 秒
  process_and_export  : 1.9578 秒
    ├─ string_buffers  : 0.3573 秒
    ├─ direct_extract  : 0.0491 秒
    └─ parquet_export  : 1.5514 秒
  total               : 1.9578 秒
  overall_total       : 15.7176 秒

--- スループット ---
  セル処理速度: 16,552,951 cells/sec
  データ処理速度: 438.64 MB/sec

--- メモリ効率 ---
  統合バッファ削除による節約: ~1459.5 MB
  ゼロコピー率: 100%（文字列・固定長とも）
==============================
[GPU] チャンク 6 処理完了:
  - 処理行数: 15,304,303 行
  - GPU全体時間: 19.82秒
  - 内訳:
    - ファイル読込: 3.56秒
    - GPU転送: 0.54秒
    - GPUパース: 13.76秒
    - 直接抽出処理: 1.96秒
      - 文字列バッファ: 0.36秒
      - 直接列抽出: 0.05秒
      - Parquet書込: 1.55秒
  - スループット: 0.34 GB/秒
  - 統合バッファ: 【削除済み】

[Rust] チャンク 7/8 転送開始
[Rust] チャンク 7 転送完了: 6.78 GB, 5.15秒 (1.32 GB/秒)

[GPU] チャンク 7 直接抽出処理開始（統合バッファ削除）
  ファイル読み込み: 3.64秒 (1.86 GB/秒)
  GPU転送: 0.54秒 (12.54 GB/秒)
=== GPU並列パース開始 ===
✅ Ultra Fast GPU並列パーサー使用（8.94倍高速化達成）
GPUパース完了: 15470135 行 (10.6269秒)
=== 直接列抽出開始（統合バッファ不使用） ===
文字列列 lo_orderpriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_orderpriority: 最適化バッファ作成完了 (232052025 bytes)
文字列列 lo_shippriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shippriority: 最適化バッファ作成完了 (15470135 bytes)
文字列列 lo_commit_date: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_commit_date: 最適化バッファ作成完了 (123761080 bytes)
文字列列 lo_shipmode: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shipmode: 最適化バッファ作成完了 (154701350 bytes)
直接列抽出開始（統合バッファ不使用）: 15470135 行

=== パフォーマンス統計（直接抽出版） ===
処理データ: 15,470,135 行 × 17 列
データサイズ: 6945.00 MB
統合バッファ: 【削除済み】

--- 詳細タイミング ---
  gpu_parsing         : 10.6269 秒
  process_and_export  : 1.9700 秒
    ├─ string_buffers  : 0.3523 秒
    ├─ direct_extract  : 0.0493 秒
    └─ parquet_export  : 1.5684 秒
  total               : 1.9700 秒
  overall_total       : 12.5969 秒

--- スループット ---
  セル処理速度: 20,877,519 cells/sec
  データ処理速度: 551.33 MB/sec

--- メモリ効率 ---
  統合バッファ削除による節約: ~1475.3 MB
  ゼロコピー率: 100%（文字列・固定長とも）
==============================
[GPU] チャンク 7 処理完了:
  - 処理行数: 15,470,135 行
  - GPU全体時間: 16.79秒
  - 内訳:
    - ファイル読込: 3.64秒
    - GPU転送: 0.54秒
    - GPUパース: 10.63秒
    - 直接抽出処理: 1.97秒
      - 文字列バッファ: 0.35秒
      - 直接列抽出: 0.05秒
      - Parquet書込: 1.57秒
  - スループット: 0.40 GB/秒/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/numba_cuda/numba/cuda/dispatcher.py:605: NumbaPerformanceWarning: [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m
  warn(NumbaPerformanceWarning(msg))
Traceback (most recent call last):
  File "/home/ubuntu/gpupgparser/benchmark/benchmark_rust_gpu_direct.py", line 377, in main
    print(f"  {col}: サンプル値 = {verification_df[col].iloc[:3].to_pandas().tolist()}")
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/cudf/utils/performance_tracking.py", line 51, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/cudf/core/series.py", line 2089, in to_pandas
    self._column.to_pandas(nullable=nullable, arrow_type=arrow_type),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/cudf/core/column/string.py", line 6137, in to_pandas
    return super().to_pandas(nullable=nullable, arrow_type=arrow_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/miniconda3/envs/cudf_dev/lib/python3.12/site-packages/cudf/core/column/column.py", line 650, in to_pandas
    return pd.Index(pa_array.to_pandas())
                    ^^^^^^^^^^^^^^^^^^^^
  File "pyarrow/array.pxi", line 887, in pyarrow.lib._PandasConvertible.to_pandas
  File "pyarrow/array.pxi", line 1558, in pyarrow.lib.Array._to_pandas
  File "pyarrow/array.pxi", line 2111, in pyarrow.lib._array_like_to_pandas
  File "pyarrow/error.pxi", line 92, in pyarrow.lib.check_status
pyarrow.lib.ArrowException: Unknown error: Wrapping rc    t�    failed

  - 統合バッファ: 【削除済み】

[Rust] チャンク 8/8 転送開始
[Rust] チャンク 8 転送完了: 6.78 GB, 5.23秒 (1.30 GB/秒)

[GPU] チャンク 8 直接抽出処理開始（統合バッファ削除）
  ファイル読み込み: 3.78秒 (1.80 GB/秒)
  GPU転送: 0.55秒 (12.39 GB/秒)
=== GPU並列パース開始 ===
✅ Ultra Fast GPU並列パーサー使用（8.94倍高速化達成）
GPUパース完了: 15469078 行 (9.2904秒)
=== 直接列抽出開始（統合バッファ不使用） ===
文字列列 lo_orderpriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_orderpriority: 最適化バッファ作成完了 (232036170 bytes)
文字列列 lo_shippriority: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shippriority: 最適化バッファ作成完了 (15469078 bytes)
文字列列 lo_commit_date: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_commit_date: 最適化バッファ作成完了 (123752624 bytes)
文字列列 lo_shipmode: RMM DeviceBuffer直接書き込み
✅ 文字列列 lo_shipmode: 最適化バッファ作成完了 (154690780 bytes)
直接列抽出開始（統合バッファ不使用）: 15469078 行

=== パフォーマンス統計（直接抽出版） ===
処理データ: 15,469,078 行 × 17 列
データサイズ: 6944.70 MB
統合バッファ: 【削除済み】

--- 詳細タイミング ---
  gpu_parsing         : 9.2904 秒
  process_and_export  : 1.9538 秒
    ├─ string_buffers  : 0.3937 秒
    ├─ direct_extract  : 0.0510 秒
    └─ parquet_export  : 1.5092 秒
  total               : 1.9538 秒
  overall_total       : 11.2443 秒

--- スループット ---
  セル処理速度: 23,387,334 cells/sec
  データ処理速度: 617.62 MB/sec

--- メモリ効率 ---
  統合バッファ削除による節約: ~1475.2 MB
  ゼロコピー率: 100%（文字列・固定長とも）
==============================
[GPU] チャンク 8 処理完了:
  - 処理行数: 15,469,078 行
  - GPU全体時間: 15.57秒
  - 内訳:
    - ファイル読込: 3.78秒
    - GPU転送: 0.55秒
    - GPUパース: 9.29秒
    - 直接抽出処理: 1.95秒
      - 文字列バッファ: 0.39秒
      - 直接列抽出: 0.05秒
      - Parquet書込: 1.51秒
  - スループット: 0.44 GB/秒
  - 統合バッファ: 【削除済み】

============================================================
✅ 全チャンク処理完了!
============================================================
総実行時間: 154.87秒
  - Rust転送合計: 39.57秒
  - GPU処理合計: 100.43秒
総データサイズ: 52.86 GB
総行数: 119,038,075 行
全体スループット: 0.34 GB/秒
Rust平均速度: 1.34 GB/秒
GPU平均速度: 0.53 GB/秒

改善率: 1.7倍（4チャンクベースライン比）

メモリ効率改善:
  - 統合バッファ削除: 約11.1 GB節約
  - ピークメモリ使用量: 大幅削減

============================================================
処理結果の検証
============================================================

cuDFでParquetファイルを読み込み中: benchmark/chunk_0_direct.parquet
cuDF読み込み完了 (0.3396秒)

--- cuDF DataFrame Info ---
<class 'cudf.core.dataframe.DataFrame'>
RangeIndex: 14808919 entries, 0 to 14808918
Data columns (total 17 columns):
 #   Column              Dtype
---  ------              -----
 0   lo_orderkey         decimal128
 1   lo_linenumber       int32
 2   lo_custkey          decimal128
 3   lo_partkey          int32
 4   lo_suppkey          decimal128
 5   lo_orderdate        int32
 6   lo_orderpriority    object
 7   lo_shippriority     object
 8   lo_quantity         decimal128
 9   lo_extendedprice    decimal128
 10  lo_ordertotalprice  decimal128
 11  lo_discount         decimal128
 12  lo_revenue          decimal128
 13  lo_supplycost       decimal128
 14  lo_tax              decimal128
 15  lo_commit_date      object
 16  lo_shipmode         object
dtypes: decimal128(10), int32(3), object(4)
memory usage: 3.1+ GB

読み込み結果: 14,808,919 行 × 17 列

データ型:
  lo_orderkey: decimal128
  lo_linenumber: int32
  lo_custkey: decimal128
  lo_partkey: int32
  lo_suppkey: decimal128
  lo_orderdate: int32
  lo_orderpriority: object
  lo_shippriority: object
  lo_quantity: decimal128
  lo_extendedprice: decimal128
  lo_ordertotalprice: decimal128
  lo_discount: decimal128
  lo_revenue: decimal128
  lo_supplycost: decimal128
  lo_tax: decimal128
  lo_commit_date: object
  lo_shipmode: object

--- cuDF DataFrame Head (全列表示) ---
cuDF Head (列別表示):
  列 1 lo_orderkey         : [Decimal('897525.19'), Decimal('0.00'), Decimal('897525.44')]
  列 2 lo_linenumber       : [1, 909260288, 1]
  列 3 lo_custkey          : [Decimal('9153.05'), Decimal('0.00'), Decimal('11434.27')]
  列 4 lo_partkey          : [560466, 33554688, 226436]
  列 5 lo_suppkey          : [Decimal('550.35'), Decimal('0.00'), Decimal('870.55')]

基本統計:
  lo_linenumber: 平均=60758286.63, 最小=-2147483648.00, 最大=2147155968.00
  lo_partkey: 平均=61275346.48, 最小=-2147483648.00, 最大=2147287040.00
  lo_orderdate: 平均=74697785.71, 最小=-2147483648.00, 最大=2147221504.00

文字列列の検証:

検証失敗: Unknown error: Wrapping rc    t�    failed
