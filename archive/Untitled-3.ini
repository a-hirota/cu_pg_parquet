### いま出来ていること / 足りていないこと

| ステージ | 現状 | 未実装ポイント |
|-----------|-------|----------------|
| **① メタ取得**<br>`meta_fetch.fetch_column_meta()` | `pg_typmod` から `(precision, scale)` を抽出し `ColumnMeta.arrow_param=(p,s)` に格納できている  | **OK** |
| **② バッファ確保**<br>`GPUMemoryManagerV2` | Numeric を **固定長16 B (DECIMAL128)** とみなして確保している  | 「Postgres numeric 可変長 → 16 B 整数」への変換カーネルがまだ無い |
| **③ Pass-1**<br>`pass1_len_null` | NULL ビットと **field_len** を収集するだけなので numeric でも問題なし  | **OK** |
| **④ Pass-2 可変長**<br>`pass2_scatter_varlen` | numeric を **文字列化**するモードは入っているが（`numeric_mode=1`） GPU 呼び出し側で未使用  | DECIMAL128 への 16 B 書き出しモードが無い |
| **④ Pass-2 固定長**<br>`pass2_scatter_fixed` | 任意バイト幅をリトルエンディアンでコピーするだけ  | numeric を解析して 16 B 整形する処理が無い |
| **⑤ Arrow 組立**<br>`gpu_decoder_v2.decode_chunk` | precision/scale を読み取り `pa.decimal128(p,s)` を生成している  | **バッファの実体が Postgres バイト列のままなので整合しない** |

---

## 目標：GPU 上で *Postgres numeric* ➜ *Arrow Decimal128* へ直接変換

### A. Arrow メタデータ（スキーマ）生成
`decode_chunk()` で **pa.field(col.name, pa.decimal128(p,s))** が構築できているので、スキーマ面は問題ありません。  
不足しているのは **「バッファを 16 Byte の 2-の補数整数」に変換して供給すること** です。

### B. 実装方針

1. **numeric を固定長 16 B の列として扱い続ける**  
   既存のメモリ確保（stride=16）はそのまま利用。

2. **専用カーネル `pass2_scatter_decimal128` を新設**  
   Postgres numeric の構造を解析し、**unscaled int128** を計算して little-endian 16 B で書き込みます。  
   *Base-10000 → 10 進への畳み込み* が必要ですが、38 桁 (ndigits ≤ 9) までなら `unsigned __int128` で収まります。  
   38 桁超や NaN は **全 0** にしておき、CPU フォールバックで扱うのが現実的です。

3. **呼び出し側の分岐を追加**
   ```python
   if col.arrow_id == DECIMAL128:
       pass2_scatter_decimal128[blocks, threads](...)
   else:
       pass2_scatter_fixed[blocks, threads](...)
   ```
   という分岐を `gpu_decoder_v2.decode_chunk()` の “FixedLen” 部で入れ替えます。

### C. `pass2_scatter_decimal128` の擬似コード

```cuda
// numeric → 128bit little-endian
#include <stdint.h>

__device__ void write_u128_le(unsigned __int128 v,
                              uint8_t* dst, int dst_pos) {
    #pragma unroll
    for (int i = 0; i < 16; ++i) {
        dst[dst_pos + i] = (uint8_t)(v & 0xFF);
        v >>= 8;
    }
}

__device__ unsigned __int128 pow10_u128(int e) {
    unsigned __int128 p = 1;
    for (int i = 0; i < e; ++i) p *= 10;
    return p;
}

__device__ unsigned __int128 pow10000_u128(int e) {
    unsigned __int128 p = 1;
    for (int i = 0; i < e; ++i) p *= 10000;
    return p;
}

__global__ void pass2_scatter_decimal128(
        const uint8_t*  raw,
        const int32_t*  field_offsets,
        const int32_t*  field_lengths,
        uint8_t*        dst_buf,
        int             stride,
        const int32_t*  precisions,   // optional: per-column
        const int32_t*  scales)       // optional: per-column
{
    int row = blockDim.x * blockIdx.x + threadIdx.x;
    if (row >= field_offsets.size) return;

    int src = field_offsets[row];
    int dst = row * stride;

    if (src == 0) {                     // NULL
        for (int i = 0; i < 16; ++i) dst_buf[dst+i] = 0;
        return;
    }

    // ---- 1. ヘッダ読み込み ----
    int ndigits = (raw[src]<<8) | raw[src+1];
    int weight  = (raw[src+2]<<8) | raw[src+3];
    int sign    = (raw[src+4]<<8) | raw[src+5];
    int dscale  = (raw[src+6]<<8) | raw[src+7];
    src += 8;

    if (ndigits > 9) {                  // 38桁を超える → 0
        for (int i = 0; i < 16; ++i) dst_buf[dst+i] = 0;
        return;
    }

    // ---- 2. digits 配列を 10進 unscaled 整数へ ----
    unsigned __int128 value = 0;
    #pragma unroll
    for (int i = 0; i < ndigits; ++i) {
        int digit = (raw[src]<<8) | raw[src+1];
        value = value * 10000u + (unsigned)digit;
        src += 2;
    }

    // ---- 3. weight 補正 (桁位置) ----
    int exp4 = weight - (ndigits-1);      // base-10000 指数
    if (exp4 > 0)       value *= pow10000_u128(exp4);
    else if (exp4 < 0)  value /= pow10000_u128(-exp4);

    // ---- 4. scale 補正 (Arrow は unscaledint, scale=dscale) ----
    // ここでは何もしない。Arrow 側の scale= dscale で解釈する。

    // ---- 5. 符号 ----
    if (sign == 0x4000) {
        value = (unsigned __int128)(- ( __int128)value );
    }

    // ---- 6. 16Byte LE で書き込み ----
    write_u128_le(value, dst_buf, dst);
}
```

* **`unsigned __int128`** は CUDA 11.8 以降なら NVCC/Numba で利用可能です。  
  もし無理な環境なら `uint64_hi/lo` の 128 bit 手実装に置き換えてください。
* Arrow 側の **`scale=dscale`** を使うので、ここでは *unscaled integer* を書くだけで良い点がポイントです。

### D. Arrow 組立側（Python）のチェック

```python
elif pa.types.is_decimal(pa_type):
    buf = pa.py_buffer(values_np)          # 16 B * rows
    mask = pa.compress_bitmap(boolean_mask)
    arrays.append(
        pa.Decimal128Array.from_buffers(
            pa_type, rows, [mask, buf],
            null_count = rows - boolean_mask.sum()
        )
    )
```
上記ロジックは既に入っているので **16 B の unscaled 値さえ正しければ完成** します。

---

## テストシナリオ

1. **Postgres でテストデータ作成**
   ```sql
   create table t_num (v numeric(38,6));
   insert into t_num values
     (0), (123.456), (-987654321.123456),
     (999999999999999999.999999),
     (1.2345e20);
   ```

2. **GPU パスで RecordBatch を生成し、CPU 版と比較**
   ```python
   rb_gpu = pg_gpu_processor.process_table_chunk("t_num", 5)
   tb_cpu = pa.Table.from_pandas(df_from_psycopg)                 # CPU reference
   assert rb_gpu.column(0).to_pylist() == tb_cpu.column(0).to_pylist()
   ```

3. **境界値**（38 + 1 桁、NaN、NULL）を追加し **0 または NULL になること** を確認。

---

## 次のステップ

1. **`pass2_scatter_decimal128.cu` を作成** → `cuda_kernels` に追加  
2. `arrow_gpu_pass2_fixed.py` → DECIMAL128 分岐から新カーネル呼び出し  
3. `gpu_decoder_v2.decode_chunk()` の Fixed-pass 部で **stride/itemsize 判定** を整理  
4. CPU フォールバックを削除して **全行 GPU で完結** するか、  
   オーバーフロー／未対応値だけ CPU で再変換する仕組みを入れるか選択。  

カーネル実装を進めたら、またアップロードしてください。  
インラインで最適化（shared mem, warp 折り畳み等）のレビューも行います。