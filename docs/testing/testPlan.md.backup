# GPU PostgreSQL Parser Test Plan
Generated: 2025-08-06 22:30:27

## Overview

This test plan covers the comprehensive testing strategy for the GPU PostgreSQL Parser project.
The parser reads PostgreSQL binary data using COPY BINARY protocol and processes it on GPUs.

## Pipeline Functions

### F1: PostgreSQL to Binary

**Description**: PostgreSQL COPY BINARY extraction and metadata generation

**Components**:
- readPostgres/metadata.py
- rust_pg_binary_extractor
- processors/gpu_pipeline_processor.py (rust_producer)

**Test Coverage**:
- ✅ E2E Test: `test_postgresql_to_binary.py`
- ✅ Unit Tests: Component-specific tests
- ✅ Performance Tests: Benchmark scripts

### F2: Binary to Arrow

**Description**: GPU binary parsing and Arrow array generation

**Components**:
- cuda_kernels/postgres_binary_parser.py
- cuda_kernels/binary_to_arrow.py
- processors/gpu_pipeline_processor.py (gpu_consumer)

**Test Coverage**:
- ✅ E2E Test: `test_binary_to_arrow.py`
- ✅ Unit Tests: Component-specific tests
- ✅ Performance Tests: Benchmark scripts

### F3: Arrow to Parquet

**Description**: Arrow to cuDF conversion and Parquet export

**Components**:
- postgres_to_parquet_converter.py (DirectProcessor)
- write_parquet_from_cudf.py
- processors/gpu_pipeline_processor.py (parquet_writer)

**Test Coverage**:
- ✅ E2E Test: `test_arrow_to_parquet.py`
- ✅ Unit Tests: Component-specific tests
- ✅ Performance Tests: Benchmark scripts

## Supported Data Types

| PostgreSQL Type | OID | Arrow Type | Test Status |
|----------------|-----|------------|-------------|

## Test Categories

### 1. End-to-End Tests
- test_all_types
- test_postgres_to_binary
- test_binary_to_arrow
- test_arrow_to_parquet

### 2. Type Matrix Tests
- test_type_matrix: Comprehensive type × function testing

### 3. Integration Tests
- test_full_pipeline

### 4. Performance Tests
- GPU memory transfer benchmarks
- Parsing performance tests
- End-to-end throughput tests

## Component Analysis

### Python Components
- **src/write_parquet_from_cudf.py**
- **src/types.py**
  - Classes: from, ColumnMeta
- **src/postgres_to_cudf.py**
  - CUDA Kernels: _add128_fast, _mul128_u64_fast
  - Classes: DirectColumnExtractor
- **src/postgres_to_parquet_converter.py**
  - Classes: DirectProcessor
- **src/cuda_kernels/postgres_binary_parser.py**
  - CUDA Kernels: count_valid_rows, create_sort_indices, bitonic_sort_step
- **src/cuda_kernels/postgres_binary_parser_debug.py**
  - CUDA Kernels: parse_rows_and_fields_lite_with_range_debug
- **src/cuda_kernels/gpu_configuration.py**
  - CUDA Kernels: find_row_start_offsets_parallel, count_rows_parallel, extract_fields_coalesced
- **src/archive/main_postgres_to_parquet_refactored.py**
  - CUDA Kernels: postgresql_to_cudf_parquet_individual
  - Classes: IndividualBufferProcessor
- **src/archive/gpu_decoder_v7_column_wise_integrated.py**
  - CUDA Kernels: extract_var_lengths, extract_column_data_individual
- **src/archive/arrow_converter.py**

### Rust Components
- **rust/build.rs**
- **rust/src/arrow_builder.rs**
  - Structs: ArrowStringBuilder, GpuArrowBuffers
- **rust/src/cuda.rs**
  - Structs: CudaContext, CudaBuffer
- **rust/src/ffi.rs**
  - Structs: TransferResult
- **rust/src/lib.rs**

## Test Execution Guide

### Quick Test
```bash
# Run specific test category
python -m pytest tests/e2e/test_postgres_to_binary.py -v
python -m pytest tests/test_type_matrix.py -v
```

### Full Test Suite
```bash
# Run all tests
python tests/run_all_tests.py

# Or use the shell script
bash tests/verify_tests.sh
```

### Test with Coverage
```bash
python -m pytest tests/ --cov=src --cov=processors --cov-report=html
```
